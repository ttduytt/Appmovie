package com.mycompany.myapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class MovieAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMovieAllPropertiesEquals(Movie expected, Movie actual) {
        assertMovieAutoGeneratedPropertiesEquals(expected, actual);
        assertMovieAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMovieAllUpdatablePropertiesEquals(Movie expected, Movie actual) {
        assertMovieUpdatableFieldsEquals(expected, actual);
        assertMovieUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMovieAutoGeneratedPropertiesEquals(Movie expected, Movie actual) {
        assertThat(expected)
            .as("Verify Movie auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMovieUpdatableFieldsEquals(Movie expected, Movie actual) {
        assertThat(expected)
            .as("Verify Movie relevant properties")
            .satisfies(e -> assertThat(e.getMovieName()).as("check movieName").isEqualTo(actual.getMovieName()))
            .satisfies(e -> assertThat(e.getRelease()).as("check release").isEqualTo(actual.getRelease()))
            .satisfies(e -> assertThat(e.getAuthor()).as("check author").isEqualTo(actual.getAuthor()))
            .satisfies(e -> assertThat(e.getView()).as("check view").isEqualTo(actual.getView()))
            .satisfies(e -> assertThat(e.getDescription()).as("check description").isEqualTo(actual.getDescription()))
            .satisfies(e -> assertThat(e.getNumberEpisode()).as("check numberEpisode").isEqualTo(actual.getNumberEpisode()))
            .satisfies(e -> assertThat(e.getAvatar()).as("check avatar").isEqualTo(actual.getAvatar()))
            .satisfies(e -> assertThat(e.getLinkMovie()).as("check linkMovie").isEqualTo(actual.getLinkMovie()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMovieUpdatableRelationshipsEquals(Movie expected, Movie actual) {
        assertThat(expected)
            .as("Verify Movie relationships")
            .satisfies(e -> assertThat(e.getNation()).as("check nation").isEqualTo(actual.getNation()))
            .satisfies(e -> assertThat(e.getActors()).as("check actors").isEqualTo(actual.getActors()))
            .satisfies(e -> assertThat(e.getTopics()).as("check topics").isEqualTo(actual.getTopics()));
    }
}
