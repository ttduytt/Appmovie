package com.mycompany.myapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ActorAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertActorAllPropertiesEquals(Actor expected, Actor actual) {
        assertActorAutoGeneratedPropertiesEquals(expected, actual);
        assertActorAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertActorAllUpdatablePropertiesEquals(Actor expected, Actor actual) {
        assertActorUpdatableFieldsEquals(expected, actual);
        assertActorUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertActorAutoGeneratedPropertiesEquals(Actor expected, Actor actual) {
        assertThat(expected)
            .as("Verify Actor auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertActorUpdatableFieldsEquals(Actor expected, Actor actual) {
        assertThat(expected)
            .as("Verify Actor relevant properties")
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getAge()).as("check age").isEqualTo(actual.getAge()))
            .satisfies(e -> assertThat(e.getHeight()).as("check height").isEqualTo(actual.getHeight()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertActorUpdatableRelationshipsEquals(Actor expected, Actor actual) {
        assertThat(expected)
            .as("Verify Actor relationships")
            .satisfies(e -> assertThat(e.getMovies()).as("check movies").isEqualTo(actual.getMovies()));
    }
}
